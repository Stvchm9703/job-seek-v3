# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: job-apply.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from twirp.client import TwirpClient
try:
	from twirp.async_client import AsyncTwirpClient
	_async_available = True
except ModuleNotFoundError:
	_async_available = False

_sym_db = _symbol_database.Default()

class JobExtendsionServiceServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService"
		self._endpoints = {
			"ApplyJob": Endpoint(
				service_name="JobExtendsionService",
				name="ApplyJob",
				function=getattr(service, "ApplyJob"),
				input=_sym_db.GetSymbol("job_seek.job_apply.JobApply"),
				output=_sym_db.GetSymbol("job_seek.job_apply.JobResponse"),
			),
			"UpdateJobApply": Endpoint(
				service_name="JobExtendsionService",
				name="UpdateJobApply",
				function=getattr(service, "UpdateJobApply"),
				input=_sym_db.GetSymbol("job_seek.job_apply.JobApply"),
				output=_sym_db.GetSymbol("job_seek.job_apply.JobResponse"),
			),
			"ListJobApply": Endpoint(
				service_name="JobExtendsionService",
				name="ListJobApply",
				function=getattr(service, "ListJobApply"),
				input=_sym_db.GetSymbol("job_seek.job_apply.GetJobApplyRequest"),
				output=_sym_db.GetSymbol("job_seek.job_apply.GetJobApplyResponse"),
			),
			"GetJobApply": Endpoint(
				service_name="JobExtendsionService",
				name="GetJobApply",
				function=getattr(service, "GetJobApply"),
				input=_sym_db.GetSymbol("job_seek.job_apply.GetJobApplyRequest"),
				output=_sym_db.GetSymbol("job_seek.job_apply.JobApply"),
			),
			"JobBookmark": Endpoint(
				service_name="JobExtendsionService",
				name="JobBookmark",
				function=getattr(service, "JobBookmark"),
				input=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkRequest"),
				output=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkResponse"),
			),
			"ListJobBookmark": Endpoint(
				service_name="JobExtendsionService",
				name="ListJobBookmark",
				function=getattr(service, "ListJobBookmark"),
				input=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkRequest"),
				output=_sym_db.GetSymbol("job_seek.job_apply.ListJobBookmarkResponse"),
			),
			"DeleteJobBookmark": Endpoint(
				service_name="JobExtendsionService",
				name="DeleteJobBookmark",
				function=getattr(service, "DeleteJobBookmark"),
				input=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkRequest"),
				output=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkResponse"),
			),
		}

class JobExtendsionServiceClient(TwirpClient):

	def ApplyJob(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/ApplyJob",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobResponse"),
			**kwargs,
		)

	def UpdateJobApply(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/UpdateJobApply",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobResponse"),
			**kwargs,
		)

	def ListJobApply(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/ListJobApply",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.job_apply.GetJobApplyResponse"),
			**kwargs,
		)

	def GetJobApply(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/GetJobApply",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobApply"),
			**kwargs,
		)

	def JobBookmark(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/JobBookmark",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkResponse"),
			**kwargs,
		)

	def ListJobBookmark(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/ListJobBookmark",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.job_apply.ListJobBookmarkResponse"),
			**kwargs,
		)

	def DeleteJobBookmark(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/DeleteJobBookmark",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkResponse"),
			**kwargs,
		)


if _async_available:
	class AsyncJobExtendsionServiceClient(AsyncTwirpClient):

		async def ApplyJob(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/ApplyJob",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobResponse"),
				session=session,
				**kwargs,
			)

		async def UpdateJobApply(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/UpdateJobApply",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobResponse"),
				session=session,
				**kwargs,
			)

		async def ListJobApply(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/ListJobApply",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.job_apply.GetJobApplyResponse"),
				session=session,
				**kwargs,
			)

		async def GetJobApply(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/GetJobApply",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobApply"),
				session=session,
				**kwargs,
			)

		async def JobBookmark(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/JobBookmark",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkResponse"),
				session=session,
				**kwargs,
			)

		async def ListJobBookmark(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/ListJobBookmark",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.job_apply.ListJobBookmarkResponse"),
				session=session,
				**kwargs,
			)

		async def DeleteJobBookmark(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.job_apply.JobExtendsionService/DeleteJobBookmark",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.job_apply.JobBookmarkResponse"),
				session=session,
				**kwargs,
			)
