# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: prediction.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import (
    job_search as _job_search__,
    user_management as _user_management__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class JobMatchScore(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    job_id: str = betterproto.string_field(2)
    predict_score: float = betterproto.float_field(3)
    hitted_keywords: List["_user_management__.PreferenceKeyword"] = (
        betterproto.message_field(4)
    )
    """should be inside the job details"""

    job: Optional["_job_search__.Job"] = betterproto.message_field(
        5, optional=True, group="_job"
    )
    user_profile: Optional["_user_management__.UserProfile"] = (
        betterproto.message_field(6, optional=True, group="_user_profile")
    )


@dataclass(eq=False, repr=False)
class SurveyUserPerfenceRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    survey_id: str = betterproto.string_field(2)
    keywords: List["_user_management__.PreferenceKeyword"] = betterproto.message_field(
        3
    )


@dataclass(eq=False, repr=False)
class SurveyJobPerfenceRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    survey_id: str = betterproto.string_field(2)
    job_score: List["JobMatchScore"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ExtractKeywords(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    session_id: str = betterproto.string_field(2)
    user_profile: Optional["_user_management__.UserProfile"] = (
        betterproto.message_field(3, optional=True, group="_user_profile")
    )
    job: Optional["_job_search__.Job"] = betterproto.message_field(
        4, optional=True, group="_job"
    )


@dataclass(eq=False, repr=False)
class GenerateCoverLetterRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    job_id: str = betterproto.string_field(2)
    session_id: str = betterproto.string_field(3)
    user_profile: Optional["_user_management__.UserProfile"] = (
        betterproto.message_field(4, optional=True, group="_user_profile")
    )
    job: Optional["_job_search__.Job"] = betterproto.message_field(
        5, optional=True, group="_job"
    )


@dataclass(eq=False, repr=False)
class GenerateCoverLetterResponse(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    job_id: str = betterproto.string_field(2)
    session_id: str = betterproto.string_field(3)
    content: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetSurveyJobRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    survey_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetSurveyJobResponse(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    survey_id: str = betterproto.string_field(2)
    jobs: List["_job_search__.Job"] = betterproto.message_field(3)


class PredictionServiceStub(betterproto.ServiceStub):
    async def survey_user_perfence(
        self,
        survey_user_perfence_request: "SurveyUserPerfenceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_user_management__.UserResponse":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/SurveyUserPerfence",
            survey_user_perfence_request,
            _user_management__.UserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_survey_job(
        self,
        get_survey_job_request: "GetSurveyJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetSurveyJobResponse":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/GetSurveyJob",
            get_survey_job_request,
            GetSurveyJobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def survey_job_perfence(
        self,
        survey_job_perfence_request: "SurveyJobPerfenceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_user_management__.UserResponse":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/SurveyJobPerfence",
            survey_job_perfence_request,
            _user_management__.UserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def predict_job_match_score(
        self,
        job_match_score: "JobMatchScore",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JobMatchScore":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/PredictJobMatchScore",
            job_match_score,
            JobMatchScore,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def extract_job_keywords(
        self,
        extract_keywords: "ExtractKeywords",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExtractKeywords":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/ExtractJobKeywords",
            extract_keywords,
            ExtractKeywords,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def extract_user_profile_keywords(
        self,
        extract_keywords: "ExtractKeywords",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExtractKeywords":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/ExtractUserProfileKeywords",
            extract_keywords,
            ExtractKeywords,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generate_cover_letter(
        self,
        generate_cover_letter_request: "GenerateCoverLetterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GenerateCoverLetterResponse":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/GenerateCoverLetter",
            generate_cover_letter_request,
            GenerateCoverLetterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generate_cv(
        self,
        generate_cover_letter_request: "GenerateCoverLetterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GenerateCoverLetterResponse":
        return await self._unary_unary(
            "/job_seek.prediction.PredictionService/GenerateCV",
            generate_cover_letter_request,
            GenerateCoverLetterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PredictionServiceBase(ServiceBase):

    async def survey_user_perfence(
        self, survey_user_perfence_request: "SurveyUserPerfenceRequest"
    ) -> "_user_management__.UserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_survey_job(
        self, get_survey_job_request: "GetSurveyJobRequest"
    ) -> "GetSurveyJobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def survey_job_perfence(
        self, survey_job_perfence_request: "SurveyJobPerfenceRequest"
    ) -> "_user_management__.UserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def predict_job_match_score(
        self, job_match_score: "JobMatchScore"
    ) -> "JobMatchScore":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def extract_job_keywords(
        self, extract_keywords: "ExtractKeywords"
    ) -> "ExtractKeywords":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def extract_user_profile_keywords(
        self, extract_keywords: "ExtractKeywords"
    ) -> "ExtractKeywords":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generate_cover_letter(
        self, generate_cover_letter_request: "GenerateCoverLetterRequest"
    ) -> "GenerateCoverLetterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generate_cv(
        self, generate_cover_letter_request: "GenerateCoverLetterRequest"
    ) -> "GenerateCoverLetterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_survey_user_perfence(
        self,
        stream: "grpclib.server.Stream[SurveyUserPerfenceRequest, _user_management__.UserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.survey_user_perfence(request)
        await stream.send_message(response)

    async def __rpc_get_survey_job(
        self, stream: "grpclib.server.Stream[GetSurveyJobRequest, GetSurveyJobResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_survey_job(request)
        await stream.send_message(response)

    async def __rpc_survey_job_perfence(
        self,
        stream: "grpclib.server.Stream[SurveyJobPerfenceRequest, _user_management__.UserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.survey_job_perfence(request)
        await stream.send_message(response)

    async def __rpc_predict_job_match_score(
        self, stream: "grpclib.server.Stream[JobMatchScore, JobMatchScore]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.predict_job_match_score(request)
        await stream.send_message(response)

    async def __rpc_extract_job_keywords(
        self, stream: "grpclib.server.Stream[ExtractKeywords, ExtractKeywords]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.extract_job_keywords(request)
        await stream.send_message(response)

    async def __rpc_extract_user_profile_keywords(
        self, stream: "grpclib.server.Stream[ExtractKeywords, ExtractKeywords]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.extract_user_profile_keywords(request)
        await stream.send_message(response)

    async def __rpc_generate_cover_letter(
        self,
        stream: "grpclib.server.Stream[GenerateCoverLetterRequest, GenerateCoverLetterResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_cover_letter(request)
        await stream.send_message(response)

    async def __rpc_generate_cv(
        self,
        stream: "grpclib.server.Stream[GenerateCoverLetterRequest, GenerateCoverLetterResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_cv(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/job_seek.prediction.PredictionService/SurveyUserPerfence": grpclib.const.Handler(
                self.__rpc_survey_user_perfence,
                grpclib.const.Cardinality.UNARY_UNARY,
                SurveyUserPerfenceRequest,
                _user_management__.UserResponse,
            ),
            "/job_seek.prediction.PredictionService/GetSurveyJob": grpclib.const.Handler(
                self.__rpc_get_survey_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSurveyJobRequest,
                GetSurveyJobResponse,
            ),
            "/job_seek.prediction.PredictionService/SurveyJobPerfence": grpclib.const.Handler(
                self.__rpc_survey_job_perfence,
                grpclib.const.Cardinality.UNARY_UNARY,
                SurveyJobPerfenceRequest,
                _user_management__.UserResponse,
            ),
            "/job_seek.prediction.PredictionService/PredictJobMatchScore": grpclib.const.Handler(
                self.__rpc_predict_job_match_score,
                grpclib.const.Cardinality.UNARY_UNARY,
                JobMatchScore,
                JobMatchScore,
            ),
            "/job_seek.prediction.PredictionService/ExtractJobKeywords": grpclib.const.Handler(
                self.__rpc_extract_job_keywords,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExtractKeywords,
                ExtractKeywords,
            ),
            "/job_seek.prediction.PredictionService/ExtractUserProfileKeywords": grpclib.const.Handler(
                self.__rpc_extract_user_profile_keywords,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExtractKeywords,
                ExtractKeywords,
            ),
            "/job_seek.prediction.PredictionService/GenerateCoverLetter": grpclib.const.Handler(
                self.__rpc_generate_cover_letter,
                grpclib.const.Cardinality.UNARY_UNARY,
                GenerateCoverLetterRequest,
                GenerateCoverLetterResponse,
            ),
            "/job_seek.prediction.PredictionService/GenerateCV": grpclib.const.Handler(
                self.__rpc_generate_cv,
                grpclib.const.Cardinality.UNARY_UNARY,
                GenerateCoverLetterRequest,
                GenerateCoverLetterResponse,
            ),
        }
