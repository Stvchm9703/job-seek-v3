# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: job-apply.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import job_search as _job_search__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class JobStatus(betterproto.Enum):
    PENDING = 0
    SENT = 1
    ACCEPTED = 2
    REJECTED = 3
    CANCELLED = 4


@dataclass(eq=False, repr=False)
class JobResponse(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class JobApply(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(2)
    status: Optional["JobStatus"] = betterproto.enum_field(
        3, optional=True, group="_status"
    )
    created_at: Optional[str] = betterproto.string_field(
        4, optional=True, group="_created_at"
    )
    updated_at: Optional[str] = betterproto.string_field(
        5, optional=True, group="_updated_at"
    )
    cover_letter: Optional[str] = betterproto.string_field(
        6, optional=True, group="_cover_letter"
    )
    cv_content: Optional[str] = betterproto.string_field(
        7, optional=True, group="_cv_content"
    )
    cv_file: Optional[bytes] = betterproto.bytes_field(
        8, optional=True, group="_cv_file"
    )
    job: Optional["_job_search__.Job"] = betterproto.message_field(
        9, optional=True, group="_job"
    )
    deleted_at: Optional[str] = betterproto.string_field(
        10, optional=True, group="_deleted_at"
    )
    """for update"""

    message: Optional[str] = betterproto.string_field(
        11, optional=True, group="_message"
    )


@dataclass(eq=False, repr=False)
class GetJobApplyRequest(betterproto.Message):
    job_id: Optional[str] = betterproto.string_field(1, optional=True, group="_job_id")
    user_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_user_id"
    )
    status: List["JobStatus"] = betterproto.enum_field(3)
    page_number: Optional[int] = betterproto.int32_field(
        4, optional=True, group="_page_number"
    )
    page_size: Optional[int] = betterproto.int32_field(
        5, optional=True, group="_page_size"
    )


@dataclass(eq=False, repr=False)
class GetJobApplyResponse(betterproto.Message):
    job_applies: List["JobApply"] = betterproto.message_field(1)
    total_count: Optional[int] = betterproto.int32_field(
        2, optional=True, group="_total_count"
    )
    page_number: Optional[int] = betterproto.int32_field(
        3, optional=True, group="_page_number"
    )
    total_page: Optional[int] = betterproto.int32_field(
        4, optional=True, group="_total_page"
    )
    message: Optional[str] = betterproto.string_field(
        5, optional=True, group="_message"
    )
    request_status: Optional[str] = betterproto.string_field(
        6, optional=True, group="_request_status"
    )


@dataclass(eq=False, repr=False)
class JobBookmark(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(2)
    created_at: Optional[str] = betterproto.string_field(
        3, optional=True, group="_created_at"
    )
    updated_at: Optional[str] = betterproto.string_field(
        4, optional=True, group="_updated_at"
    )
    deleted_at: Optional[str] = betterproto.string_field(
        5, optional=True, group="_deleted_at"
    )
    job: Optional["_job_search__.Job"] = betterproto.message_field(
        6, optional=True, group="_job"
    )


@dataclass(eq=False, repr=False)
class JobBookmarkRequest(betterproto.Message):
    job_id: Optional[str] = betterproto.string_field(1, optional=True, group="_job_id")
    user_id: Optional[str] = betterproto.string_field(
        2, optional=True, group="_user_id"
    )
    is_deleted: Optional[bool] = betterproto.bool_field(
        3, optional=True, group="_is_deleted"
    )
    should_show_all: Optional[bool] = betterproto.bool_field(
        4, optional=True, group="_should_show_all"
    )


@dataclass(eq=False, repr=False)
class JobBookmarkResponse(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListJobBookmarkResponse(betterproto.Message):
    bookmarked_jobs: List["JobBookmark"] = betterproto.message_field(1)
    total_count: Optional[int] = betterproto.int32_field(
        2, optional=True, group="_total_count"
    )
    page_number: Optional[int] = betterproto.int32_field(
        3, optional=True, group="_page_number"
    )
    total_page: Optional[int] = betterproto.int32_field(
        4, optional=True, group="_total_page"
    )
    message: Optional[str] = betterproto.string_field(
        5, optional=True, group="_message"
    )
    request_status: Optional[str] = betterproto.string_field(
        6, optional=True, group="_request_status"
    )


class JobExtendsionServiceStub(betterproto.ServiceStub):
    async def apply_job(
        self,
        job_apply: "JobApply",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JobResponse":
        return await self._unary_unary(
            "/job_seek.job_apply.JobExtendsionService/ApplyJob",
            job_apply,
            JobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_job_apply(
        self,
        job_apply: "JobApply",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JobResponse":
        return await self._unary_unary(
            "/job_seek.job_apply.JobExtendsionService/UpdateJobApply",
            job_apply,
            JobResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_job_apply(
        self,
        get_job_apply_request: "GetJobApplyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetJobApplyResponse":
        return await self._unary_unary(
            "/job_seek.job_apply.JobExtendsionService/ListJobApply",
            get_job_apply_request,
            GetJobApplyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_job_apply(
        self,
        get_job_apply_request: "GetJobApplyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JobApply":
        return await self._unary_unary(
            "/job_seek.job_apply.JobExtendsionService/GetJobApply",
            get_job_apply_request,
            JobApply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def job_bookmark(
        self,
        job_bookmark_request: "JobBookmarkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JobBookmarkResponse":
        return await self._unary_unary(
            "/job_seek.job_apply.JobExtendsionService/JobBookmark",
            job_bookmark_request,
            JobBookmarkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_job_bookmark(
        self,
        job_bookmark_request: "JobBookmarkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListJobBookmarkResponse":
        return await self._unary_unary(
            "/job_seek.job_apply.JobExtendsionService/ListJobBookmark",
            job_bookmark_request,
            ListJobBookmarkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_job_bookmark(
        self,
        job_bookmark_request: "JobBookmarkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JobBookmarkResponse":
        return await self._unary_unary(
            "/job_seek.job_apply.JobExtendsionService/DeleteJobBookmark",
            job_bookmark_request,
            JobBookmarkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class JobExtendsionServiceBase(ServiceBase):

    async def apply_job(self, job_apply: "JobApply") -> "JobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_job_apply(self, job_apply: "JobApply") -> "JobResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_job_apply(
        self, get_job_apply_request: "GetJobApplyRequest"
    ) -> "GetJobApplyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_job_apply(
        self, get_job_apply_request: "GetJobApplyRequest"
    ) -> "JobApply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def job_bookmark(
        self, job_bookmark_request: "JobBookmarkRequest"
    ) -> "JobBookmarkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_job_bookmark(
        self, job_bookmark_request: "JobBookmarkRequest"
    ) -> "ListJobBookmarkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_job_bookmark(
        self, job_bookmark_request: "JobBookmarkRequest"
    ) -> "JobBookmarkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_apply_job(
        self, stream: "grpclib.server.Stream[JobApply, JobResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.apply_job(request)
        await stream.send_message(response)

    async def __rpc_update_job_apply(
        self, stream: "grpclib.server.Stream[JobApply, JobResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_job_apply(request)
        await stream.send_message(response)

    async def __rpc_list_job_apply(
        self, stream: "grpclib.server.Stream[GetJobApplyRequest, GetJobApplyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_job_apply(request)
        await stream.send_message(response)

    async def __rpc_get_job_apply(
        self, stream: "grpclib.server.Stream[GetJobApplyRequest, JobApply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_job_apply(request)
        await stream.send_message(response)

    async def __rpc_job_bookmark(
        self, stream: "grpclib.server.Stream[JobBookmarkRequest, JobBookmarkResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.job_bookmark(request)
        await stream.send_message(response)

    async def __rpc_list_job_bookmark(
        self,
        stream: "grpclib.server.Stream[JobBookmarkRequest, ListJobBookmarkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_job_bookmark(request)
        await stream.send_message(response)

    async def __rpc_delete_job_bookmark(
        self, stream: "grpclib.server.Stream[JobBookmarkRequest, JobBookmarkResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_job_bookmark(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/job_seek.job_apply.JobExtendsionService/ApplyJob": grpclib.const.Handler(
                self.__rpc_apply_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                JobApply,
                JobResponse,
            ),
            "/job_seek.job_apply.JobExtendsionService/UpdateJobApply": grpclib.const.Handler(
                self.__rpc_update_job_apply,
                grpclib.const.Cardinality.UNARY_UNARY,
                JobApply,
                JobResponse,
            ),
            "/job_seek.job_apply.JobExtendsionService/ListJobApply": grpclib.const.Handler(
                self.__rpc_list_job_apply,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetJobApplyRequest,
                GetJobApplyResponse,
            ),
            "/job_seek.job_apply.JobExtendsionService/GetJobApply": grpclib.const.Handler(
                self.__rpc_get_job_apply,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetJobApplyRequest,
                JobApply,
            ),
            "/job_seek.job_apply.JobExtendsionService/JobBookmark": grpclib.const.Handler(
                self.__rpc_job_bookmark,
                grpclib.const.Cardinality.UNARY_UNARY,
                JobBookmarkRequest,
                JobBookmarkResponse,
            ),
            "/job_seek.job_apply.JobExtendsionService/ListJobBookmark": grpclib.const.Handler(
                self.__rpc_list_job_bookmark,
                grpclib.const.Cardinality.UNARY_UNARY,
                JobBookmarkRequest,
                ListJobBookmarkResponse,
            ),
            "/job_seek.job_apply.JobExtendsionService/DeleteJobBookmark": grpclib.const.Handler(
                self.__rpc_delete_job_bookmark,
                grpclib.const.Cardinality.UNARY_UNARY,
                JobBookmarkRequest,
                JobBookmarkResponse,
            ),
        }
