# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: prediction.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from twirp.client import TwirpClient
try:
	from twirp.async_client import AsyncTwirpClient
	_async_available = True
except ModuleNotFoundError:
	_async_available = False

_sym_db = _symbol_database.Default()

class PredictionServiceServer(TwirpServer):

	def __init__(self, *args, service, server_path_prefix="/twirp"):
		super().__init__(service=service)
		self._prefix = F"{server_path_prefix}/job_seek.prediction.PredictionService"
		self._endpoints = {
			"SurveyUserPerfence": Endpoint(
				service_name="PredictionService",
				name="SurveyUserPerfence",
				function=getattr(service, "SurveyUserPerfence"),
				input=_sym_db.GetSymbol("job_seek.prediction.SurveyUserPerfenceRequest"),
				output=_sym_db.GetSymbol("job_seek.user_management.UserResponse"),
			),
			"GetSurveyJob": Endpoint(
				service_name="PredictionService",
				name="GetSurveyJob",
				function=getattr(service, "GetSurveyJob"),
				input=_sym_db.GetSymbol("job_seek.prediction.GetSurveyJobRequest"),
				output=_sym_db.GetSymbol("job_seek.prediction.GetSurveyJobResponse"),
			),
			"SurveyJobPerfence": Endpoint(
				service_name="PredictionService",
				name="SurveyJobPerfence",
				function=getattr(service, "SurveyJobPerfence"),
				input=_sym_db.GetSymbol("job_seek.prediction.SurveyJobPerfenceRequest"),
				output=_sym_db.GetSymbol("job_seek.user_management.UserResponse"),
			),
			"PredictJobMatchScore": Endpoint(
				service_name="PredictionService",
				name="PredictJobMatchScore",
				function=getattr(service, "PredictJobMatchScore"),
				input=_sym_db.GetSymbol("job_seek.prediction.JobMatchScore"),
				output=_sym_db.GetSymbol("job_seek.prediction.JobMatchScore"),
			),
			"ExtractJobKeywords": Endpoint(
				service_name="PredictionService",
				name="ExtractJobKeywords",
				function=getattr(service, "ExtractJobKeywords"),
				input=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
				output=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
			),
			"ExtractUserProfileKeywords": Endpoint(
				service_name="PredictionService",
				name="ExtractUserProfileKeywords",
				function=getattr(service, "ExtractUserProfileKeywords"),
				input=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
				output=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
			),
			"GenerateCoverLetter": Endpoint(
				service_name="PredictionService",
				name="GenerateCoverLetter",
				function=getattr(service, "GenerateCoverLetter"),
				input=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterRequest"),
				output=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterResponse"),
			),
			"GenerateCV": Endpoint(
				service_name="PredictionService",
				name="GenerateCV",
				function=getattr(service, "GenerateCV"),
				input=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterRequest"),
				output=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterResponse"),
			),
		}

class PredictionServiceClient(TwirpClient):

	def SurveyUserPerfence(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/SurveyUserPerfence",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.user_management.UserResponse"),
			**kwargs,
		)

	def GetSurveyJob(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/GetSurveyJob",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.prediction.GetSurveyJobResponse"),
			**kwargs,
		)

	def SurveyJobPerfence(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/SurveyJobPerfence",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.user_management.UserResponse"),
			**kwargs,
		)

	def PredictJobMatchScore(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/PredictJobMatchScore",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.prediction.JobMatchScore"),
			**kwargs,
		)

	def ExtractJobKeywords(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/ExtractJobKeywords",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
			**kwargs,
		)

	def ExtractUserProfileKeywords(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/ExtractUserProfileKeywords",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
			**kwargs,
		)

	def GenerateCoverLetter(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/GenerateCoverLetter",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterResponse"),
			**kwargs,
		)

	def GenerateCV(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
		return self._make_request(
			url=F"{server_path_prefix}/job_seek.prediction.PredictionService/GenerateCV",
			ctx=ctx,
			request=request,
			response_obj=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterResponse"),
			**kwargs,
		)


if _async_available:
	class AsyncPredictionServiceClient(AsyncTwirpClient):

		async def SurveyUserPerfence(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/SurveyUserPerfence",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.user_management.UserResponse"),
				session=session,
				**kwargs,
			)

		async def GetSurveyJob(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/GetSurveyJob",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.prediction.GetSurveyJobResponse"),
				session=session,
				**kwargs,
			)

		async def SurveyJobPerfence(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/SurveyJobPerfence",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.user_management.UserResponse"),
				session=session,
				**kwargs,
			)

		async def PredictJobMatchScore(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/PredictJobMatchScore",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.prediction.JobMatchScore"),
				session=session,
				**kwargs,
			)

		async def ExtractJobKeywords(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/ExtractJobKeywords",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
				session=session,
				**kwargs,
			)

		async def ExtractUserProfileKeywords(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/ExtractUserProfileKeywords",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.prediction.ExtractKeywords"),
				session=session,
				**kwargs,
			)

		async def GenerateCoverLetter(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/GenerateCoverLetter",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterResponse"),
				session=session,
				**kwargs,
			)

		async def GenerateCV(self, *, ctx, request, server_path_prefix="/twirp", session=None, **kwargs):
			return await self._make_request(
				url=F"{server_path_prefix}/job_seek.prediction.PredictionService/GenerateCV",
				ctx=ctx,
				request=request,
				response_obj=_sym_db.GetSymbol("job_seek.prediction.GenerateCoverLetterResponse"),
				session=session,
				**kwargs,
			)
